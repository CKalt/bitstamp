When my tdr.py app is performing an auto_trade session it uses the json file
produced by the bktst.py app named best_strategies.json to determine the signals
to look for.

Now were are observing that sometimes less than one trade signal happens per day
and what I would like to consider are ways we can employ a trading system that
operates on smaller historical bars--- like perhaps even minute or five minute
bars. Thus we would be thinking of doing some overlay strategy that seeks to
optimize profiits while in a trade generated by the auto trader.  For this it
would be nice to after we have a 30 days of history we then seek to back test
for each of those thirty days a higher frequencing system that would move in and
out based on shorter term signals.

What I have seen during some of these trades that the price may find itself
trading inside of a tight range and what I am wondering about is how we may seek
to employee a higher speed trade of perhaps some smaller percentage of the trade
in place in order to trade the highs and lows that happen during one of the
best_strategy trades. How do we say layer such a system on tope of an existing
system.

Give me some examples. Let us say we run for 30 days like this:

python src/bktst.py \
  --start-window-days-back 30 \
  --end-window-days-back 0 \
  --high-frequency 1H \
  --low-frequency 15T


And then we want to say, what if while running the best strategy this finds we
sayd let us take 20 percent of that trade and seek the highs and lows of a range
that develops.  First we need to say that we have found a range, and then we
have to set the points for trading the highs and lows that go on.

I'm curious how we might cause the first run to generate a JSON file that
informs this other step how to go back over the same data and play some kind of
system like this. So after the above run we run something else, and that thing
trades higher frequency data as I say above.
